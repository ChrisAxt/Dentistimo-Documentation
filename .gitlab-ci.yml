# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: node:14-alpine #import the image of node.js

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - docker
  script:
    # - cd <insert name of file> #enter to the repo
    # - npm install #build the node code based on je package.json file
    # The 2 lines above need to be uncommented when the structure of the folders is decided. And this for each repo
    - echo "Compile complete."

unit-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
  - echo "Unit testing code... This will take about 10 seconds."
  - sleep 10
  - echo "No lint issues found."

backend-test-job:   # This job runs in the test stage.
  stage: test 
  tags:
    - docker
  services:
      - name: mvertes/alpine-mongo:latest #calls the mongodb service
        alias: mongo
  variables:
    MONGODB_URI: "mongodb://mongo:27017/serverTestDB" #sets the variable MONGODB_URI as an environment variable for the tests -> needs to be defined in every component using DB
  script:
    - echo "Code coverage is 90%"
    # - cd server
    # - npm run test -> check if this is the right structure for the tests
    # The 2 lines above need to be uncommented when the structure of the folders is decided. And this for each repo
    
deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
